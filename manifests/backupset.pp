# @summary creates one backupset definition in specified file, used by the main module and ::backup and ::autobackup helpers
#
# @param owner
#    set most/some files to this user or uid
#
# @param group
#    set most/some files to this group or gid
#
# @param mode
#    set most/some files to this octal mode string
#
# @param config_file
#    config file in which to create the backupset definition
#
# @param concat
#   instead of creating a file, use concat to add to file with concat::fragment
# @param host
#   sets parameter of the same name in the backupset, although there is no default for the define, rdbduprunner uses localhost if it isn't set
# @param disabled
#   sets parameter of the same name in the backupset
# @param backupdestination
#   sets parameter of the same name in the backupset
# @param inventory
#   sets parameter of the same name in the backupset
# @param inplace
#   sets parameter of the same name in the backupset
# @param checksum
#   sets parameter of the same name in the backupset
# @param wholefile
#   sets parameter of the same name in the backupset
# @param stats
#   sets parameter of the same name in the backupset
# @param prerun
#   sets parameter of the same name in the backupset
# @param postrun
#   sets parameter of the same name in the backupset
# @param maxinc
#   sets parameter of the same name in the backupset
# @param allowfs
#   sets parameter of the same name in the backupset
# @param paths
#   for each entry in this array, create a Path X statement in backupset
# @param excludes
#   for each entry in this array, create a Exclude X statement in backupset
# @param skips
#   for each entry in this array, create a Skip X statement in backupset
# @param skipres
#   for each entry in this array, create a SkipRE X statement in backupset
# @param ensure the usual present/absent magic
# @param rtag
#   override the tag in the backupset configuration, called rtag because tag is reserved
#
# @example add a backupset for a host to a config file in conf.d
#   rdbduprunner::backupset { 'badhost':
#     host => 'badhost',
#     inventory => false,
#     paths => ['data'],
#     excludes => ['not_backed_up'],
#   }
#
define rdbduprunner::backupset
(
  Enum['present','absent'] $ensure = 'present',
  Variant[String,Integer] $owner   = 'root',
  Variant[String,Integer] $group   = 0,
  String $mode                     = '0440',
  Stdlib::UnixPath $config_file = "${rdbduprunner::config_dir}/conf.d/backupset-${title}.yaml",
  # the following elements generated by puppet-parms in the
  # rdbduprunner module:
  Optional[Variant[String,Array[String]]] $allowfs = undef,
  Optional[String] $backupdestination = undef,
  Optional[Boolean] $checksum = undef,
  Optional[Boolean] $disabled = undef,
  Optional[String] $duplicitybinary = undef,
  Optional[Variant[String,Array[String]]] $exclude = undef,
  Optional[Stdlib::Host] $host = undef,
  Optional[Boolean] $inplace = undef,
  Optional[Boolean] $inventory = undef,
  Optional[String] $maxage = undef,
  Optional[Integer] $maxinc = undef,
  Optional[Variant[String,Array[String]]] $path = undef,
  Optional[String] $postrun = undef,
  Optional[String] $prerun = undef,
  Optional[String] $rdiffbackupbinary = undef,
  Optional[String] $rsyncbinary = undef,
  Optional[Variant[String,Array[String]]] $skip = undef,
  Optional[Variant[String,Array[String]]] $skipfstype = undef,
  Optional[Variant[String,Array[String]]] $skipre = undef,
  Optional[Boolean] $sshcompress = undef,
  Optional[Boolean] $stats = undef,
  Optional[String] $rtag = undef,
  Optional[Integer] $trickle = undef,
  Optional[String] $tricklebinary = undef,
  Optional[Boolean] $useagent = undef,
  Optional[Integer] $verbosity = undef,
  Optional[Integer] $volsize = undef,
  Optional[Boolean] $wholefile = undef,
  Optional[String] $zfsbinary = undef,
)
{
  validate_re($config_file,'\.(yaml|yml)$', 'config file must end in yml or yaml')
  $_backupset = {
    allowfs => $allowfs,
    backupdestination => $backupdestination,
    checksum => $checksum,
    disabled => $disabled,
    duplicitybinary => $duplicitybinary,
    exclude => $exclude,
    host => $host,
    inplace => $inplace,
    inventory => $inventory,
    maxage => $maxage,
    maxinc => $maxinc,
    path => $path,
    postrun => $postrun,
    prerun => $prerun,
    rdiffbackupbinary => $rdiffbackupbinary,
    rsyncbinary => $rsyncbinary,
    skip => $skip,
    skipfstype => $skipfstype,
    skipre => $skipre,
    sshcompress => $sshcompress,
    stats => $stats,
    tag => $rtag,
    trickle => $trickle,
    tricklebinary => $tricklebinary,
    useagent => $useagent,
    verbosity => $verbosity,
    volsize => $volsize,
    wholefile => $wholefile,
    zfsbinary => $zfsbinary,
  }

  file { regsubst($config_file,'\.(yaml|yml)$','.conf'):
    ensure => absent,
  }
  file { $config_file:
    ensure  => $ensure,
    owner   => $owner,
    group   => $group,
    mode    => $mode,
    content => to_yaml($_backupset),
  }
}
