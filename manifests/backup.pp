# @summary create a backupdestination and multiple backupsets, one per paths
# 
# @param ensure
#   Present or absent or maybe something else
# 
# @param directory
#   path to conf.d directory
# 
# @param host
#   defaults to local hostname
# @param destination
#   where to write the backups
# @param disabled enable/disable this backup
# @param prerun run this before the backup
# @param postrun run this after the backup
# @param priority changes ordering of backups (probably does not work)
# @param paths
#   hash of paths with arrays to exclude per filesystem
# @example Basic usage
#   class { 'rdbduprunner::backup':
#     destination => '/mnt/lss/backups',
#     prerun => '/bin/true',
#     paths  => {
#       '/' => [ 'opt', 'usr' ],
#     }
#
#   creates:
#   # generated by puppet for hostname
#   <BackupDestination backup>
#     Path /mnt/lss/backups
#     Type rsync
#   </BackupDestination>
# 
#   <BackupSet backup_hostname_>
#     Host hostname
#     BackupDestination backup
#     Path /
#     Exclude opt
#     Exclude usr
#   </BackupSet>
#
class rdbduprunner::backup
(
  Optional[String] $destination,
  Hash[String,Array[String]] $paths,
  Enum['present','absent'] $ensure  = 'present',
  Optional[String] $directory       = '/etc/rdbduprunner/conf.d',
  Optional[String] $host            = $::hostname,
  Optional[Boolean] $disabled       = false,
  Optional[String] $prerun          = undef,
  Optional[String] $postrun         = undef,
  Optional[Integer] $priority       = undef,
) {
  notice('this class is deprecated in favor of the main rdbduprunner class')
  validate_hash($paths)
  include rdbduprunner
  file { "${directory}/rdbduprunner-backup.conf":
    ensure  => $ensure,
    owner   => 'root',
    group   => 0,
    mode    => '0440',
    content => template('rdbduprunner/backup.erb'),
  }
  file { "/etc/cron.daily/rdbduprunner_backup.sh":
    ensure  => absent,
  }
}
